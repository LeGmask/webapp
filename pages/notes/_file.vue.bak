<template lang="pug">
//-
  COMPONENT TREE
  Excluding single-use components (TheHeading, TheNavbar, TheFooter,...)

  ArrayButtonFlat
  MainGroup
    MainGroupLeft
    MainGroupRight

.container
  link(rel='stylesheet', href='/codemirror/asciidoc/cm/lib/codemirror.css')
  link(rel='stylesheet', href='/codemirror/asciidoc/asciidoc.css')
  link(rel='stylesheet', href='/codemirror/asciidoc/editor.css')

  TheHeading {{ title }}
  MainGroup
    #leditor
      textarea#lcode
      pre#error
    #reditor
      #rprod
  script(src='/codemirror/asciidoc/cm/lib/codemirror.js')
  script(src='/codemirror/asciidoc/cm/mode/asciidoc/asciidoc.js')
  script(src='/codemirror/asciidoc/opal.js')
  script(src='/codemirror/asciidoc/asciidoc.js')

</template>

<script>
import { mapState, mapGetters, mapMutations, mapActions } from 'vuex'
import TheHeading from '~/components/TheHeading.vue'
import ArrayButtonFlat from '~/components/ArrayButtonFlat.vue'
import ButtonFlat from '~/components/ButtonFlat.vue'
import MainGroup from '~/components/MainGroup.vue'
import MainGroupLeft from '~/components/MainGroupLeft.vue'
import MainGroupRight from '~/components/MainGroupRight.vue'
import HeadingSub from '~/components/HeadingSub.vue'

export default {

    validate({params}) {
      return 
    }

    components: {
        TheHeading,
        MainGroup,
        MainGroupLeft,
        MainGroupRight,
        HeadingSub,

    },

    data() {
        return {

        }
    },

    computed: {
      ...mapGetters({
        notes: 'notes/allNotes', 
        currentCourse: 'schedule/currentCourse',
      })
    },

    mounted() {
      (function SetEditor() {
      // By default, CM maps the Tab key to the insertion of an actual tab.
      function betterTab(cm) {
        if (cm.somethingSelected()) {
          cm.indentSelection("add");
        } else {
          cm.replaceSelection(cm.getOption("indentWithTabs")? "\t":
            Array(cm.getOption("indentUnit") + 1).join(" "), "end", "+input");
        }
      }
      var editor = CodeMirror.fromTextArea(document.getElementById("lcode"), {
        mode: 'asciidoc',
        indentUnit: 2,
        lineWrapping: true,
        electricChars: false,
        extraKeys: { Tab: betterTab }
      });

      function showError(msg) {
        window.error.textContent = msg;
        window.error.style.display = 'block';
      }

      function cmChange(editor) {
        try {
          window.error.style.display = 'none';
          window.rprod.innerHTML = Opal.Asciidoctor.$render(editor.getValue());
        } catch(e) {
          showError(e.message);
        }
      }

      editor.on('change', cmChange);

      // Wrap text smartly.
      var charWidth = editor.defaultCharWidth(), basePadding = 4;
      editor.on("renderLine", function(cm, line, elt) {
        var off = CodeMirror.countColumn(line.text, null, cm.getOption("tabSize")) * charWidth;
        elt.style.textIndent = "-" + off + "px";
        elt.style.paddingLeft = (basePadding + off) + "px";
      });
      editor.refresh();
      editor.setValue(`= ${this.title} =\n`);
      window.editor = editor;

      }());
    }
}
</script>

<style lang="sass" scoped>
@import '~/assets/defaults'

</style>
